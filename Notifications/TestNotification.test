<?php

declare(strict_types=1);

namespace Modules\Notify\Notifications;

use Illuminate\Bus\Queueable;
use Illuminate\Notifications\AnonymousNotifiable;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Notification;
use Modules\Notify\Notifications\Channels\SmsChannel;

class TestNotification extends Notification {
    use Queueable;

    /**
     * Create a new notification instance.
     *
     *
     * @return void
     */
    public function __construct() {
        // dddx($a);  //
        // TestNotification($test)
        //
    }

    /**
     * Get the notification's delivery channels.
     *
     * @param mixed $notifiable
     *
     * @return array
     */
    public function via($notifiable) {
        // dddx($notifiable->routes);
        //

        // return ['mail'];
        // return ['sms']; //Driver [sms] not supported.
        return [SmsChannel::class];
        // return ['zibibbo'];//Driver [zibibbo] not supported.
    }

    /**
     * Get the mail representation of the notification.
     *
     * @param mixed $notifiable
     *
     * @return \Illuminate\Notifications\Messages\MailMessage
     */
    public function toMail($notifiable) {
        /*
        $address = $notifiable instanceof AnonymousNotifiable
            ? $notifiable->routeNotificationFor('mail')
            : $notifiable->email;
        */
        // dddx($notifiable);
        return (new MailMessage())
            ->template('user::notifications.email')
                    // ->to('marco76tv@hotmail.com')
                    // ->from('barrett@example.com', 'Barrett Blair')
                    // ->subject('Invoice Payment Failed')
                    // ->mailer('postmark')
                    // ->attach('/path/to/file');
                    // ->attach('/path/to/file', [
                    // 'as' => 'name.pdf',
                    // 'mime' => 'application/pdf',
                    // ]);
                    // ->to($notifiable->email)
                    // ->attachFromStorage('/path/to/file');
                    // ->attachMany([
                    // '/path/to/forge.svg',
                    // '/path/to/vapor.svg' => [
                    //    'as' => 'Logo.svg',
                    //    'mime' => 'image/svg+xml',
                    // ],
                    // ]);
                    //  ->attachData($this->pdf, 'name.pdf', [
                    // 'mime' => 'application/pdf',
                    // ]);
                    ->line('The introduction to the notification.')
                    ->action('Notification Action', 'https://laravel.com')
                    ->line('Thank you for using our application!');
        /*
        return (new MailMessage)->view(
            'emails.name', ['invoice' => $this->invoice]
        );
        */
        /*
        return (new MailMessage)->view(
            ['emails.name.html', 'emails.name.plain'],
            ['invoice' => $this->invoice]
        );
        */
        /*
        return (new InvoicePaidMailable($this->invoice))
                ->to($notifiable->email);
        */
    }

    public function toSms($notifiable) {
        dddx($notifiable);
    }

    /**
     * Get the array representation of the notification.
     *
     * @param mixed $notifiable
     *
     * @return array
     */
    public function toArray($notifiable) {
        dddx($notifiable);

        return [
        ];
    }
}
